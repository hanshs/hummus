// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // output   = "../../../node_modules/.prisma/client"
}

generator erd1 {
    provider  = "prisma-erd-generator"
    tableOnly = true
    output    = "ERD1.svg"
}

generator erd2 {
    provider = "prisma-erd-generator"
    output   = "ERD2.svg"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id          String          @id @default(cuid())
    username    String          @unique
    password    String
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    accessToken String          @unique @default(uuid())
    projects    UserOnProject[]
}

model Project {
    id   String @id @default(uuid())
    name String

    users    UserOnProject[]
    features Feature[]
}

model UserOnProject {
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    @@id([projectId, userId])
    @@index([projectId])
    @@index([userId])
}

model Feature {
    id          String     @id @default(uuid())
    title       String?
    description String?
    scenarios   Scenario[]
    params      Param[]
    project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String

    @@index([projectId])
}

model Scenario {
    id    Int     @id @default(autoincrement())
    name  String?
    steps Step[]

    feature   Feature @relation(fields: [featureId], references: [id])
    featureId String

    @@index([featureId])
}

model Step {
    id Int @id @default(autoincrement())

    order       Int
    scenario    Scenario  @relation(fields: [scenarioId], references: [id])
    scenarioId  Int
    behaviour   Behaviour @relation(fields: [behaviourId], references: [id])
    behaviourId Int
    params      Param[]

    @@index([scenarioId])
    @@index([behaviourId])
}

// TODO behaviour peab olema eraldi entity vist, kuis behaviouri tekst on @unique
// ja võimalik et Actionit ei ole vaja vaid Stepi küljes on Behaviour ja Params
// model Action {
//     id        Int       @id @default(autoincrement())
//     behaviour Behaviour
//     params    Param[]
//     steps     Step[]
// }

model Behaviour {
    id    Int    @id @default(autoincrement())
    value String @unique
    Step  Step[]
}

model Param {
    id      Int       @id @default(autoincrement())
    name    String    @unique
    value   String    @unique
    steps   Step[]
    type    ParamType @relation(fields: [paramTypeId], references: [id])
    feature Feature   @relation(fields: [featureId], references: [id])

    paramTypeId Int
    featureId   String

    @@index([paramTypeId])
    @@index([featureId])
}

model ParamType {
    id     Int     @id @default(autoincrement())
    type   String  @unique
    params Param[]
}
