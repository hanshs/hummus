// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // output   = "../../../node_modules/.prisma/client"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// auth models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// hummus models
model Feature {
    id          Int        @id @default(autoincrement())
    title       String     @unique
    description String
    scenarios   Scenario[]
}

model Scenario {
    id    Int    @id @default(autoincrement())
    name  String
    steps Step[]

    feature   Feature @relation(fields: [featureId], references: [id])
    featureId Int

    @@index([featureId])
}

model Step {
    id Int @id @default(autoincrement())

    scenario   Scenario @relation(fields: [scenarioId], references: [id])
    scenarioId Int
    action     Action   @relation(fields: [actionId], references: [id])
    actionId   Int

    @@index([scenarioId])
    @@index([actionId])
}

// TODO behaviour peab olema eraldi entity vist, kuis behaviouri tekst on @unique
// ja võimalik et Actionit ei ole vaja vaid Stepi küljes on Behaviour ja Params
model Action {
    id        Int     @id @default(autoincrement())
    behaviour String  @unique
    params    Param[]
    steps     Step[]
}

model Param {
    id      Int       @id @default(autoincrement())
    name    String
    value   String    @unique
    actions Action[]
    type    ParamType @relation(fields: [paramTypeId], references: [id])

    paramTypeId Int

    @@index([paramTypeId])
}

model ParamType {
    id    Int     @id @default(autoincrement())
    type  String  @unique
    Param Param[]
}
